-- assingment-3 window function
-- QUE-1 **Rank the customers based on the total amount they've spent on rentals.**
select customer.first_name,customer.last_name,sum(film.rental_rate) as total_amount_spent,
rank() over (order by sum(film.rental_rate) desc) as customer_rank
from customer join rental on customer.customer_id=rental.customer_id
join inventory on rental.inventory_id=inventory.inventory_id
join film on inventory.film_id=film.film_id
group by customer.customer_id,customer.first_name,customer.last_name
order by total_amount_spent desc;
-- QUE-2 **Calculate the cumulative revenue generated by each film over time.**
select film.title,film.rental_rate,sum(film.rental_rate) over (partition by film.film_id order by rental.rental_date) as cumulative_revenue
from film join inventory on film.film_id=inventory.film_id
join rental on inventory.inventory_id=rental.inventory_id
order by film.film_id,rental.rental_date;
-- QUE-3 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select film_id,title,rental_duration,avg(rental_duration) over (partition by length) as avg_rental_duration from film
order by film_id;
-- QUE-4 4. **Identify the top 3 films in each category based on their rental counts.**
with FilmRentalCounts as (select f.film_id,f.title,c.name as category ,count(*) as rental_count
from film f join film_category fc on f.film_id=fc.film_id 
join category c on fc.category_id=c.category_id
join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
group by f.film_id,f.title,c.name)
select film_id,title,category,rental_count,rank_within_category
from (select film_id,title,category,rental_count,dense_rank() over (partition by category order by rental_count desc) as rank_within_category
from FilmRentalCounts)
RankedFilms where rank_within_category<=3
order by category,rank_within_category;
-- QUE-5 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
-- across all customers.**
with customerrentalcounts as (select c.customer_id,count(r.rental_id) as rental_count,
avg(count(r.rental_id)) over () as avg_rental_count
from customer c left join rental r on c.customer_id=r.customer_id group by c.customer_id)
select customer_id,rental_count,rental_count-avg_rental_count as rental_count_difference from customerrentalcounts;
-- QUE-6 **Find the monthly revenue trend for the entire rental store over time.**
select date_format(rental_date,'%y-%m') as month, sum(rental_rate) over (order by date_format(rental_date,'%y-%m')) as monthly_revenue 
from rental join inventory on rental.inventory_id=inventory.inventory_id
join film on inventory.film_id=film.film_id order by month ;
-- QUE-8 **Calculate the running total of rentals per category, ordered by rental count.**
with categoryrentalcounts as (
select fc.category_id,c.name as category_name,count(r.rental_id) as rental_count 
from film_category fc join film f on fc.film_id=f.film_id
join inventory i on f.film_id = i.film_id
join rental r on i.inventory_id=r.inventory_id
join category c on fc.category_id=c.category_id
group by fc.category_id,c.name)
select category_id,category_name,rental_count,sum(rental_count) over(partition by category_id order by rental_count desc) as running_total from 
categoryrentalcounts order by rental_count desc;
-- QUE-9 **Find the films that have been rented less than the average rental count for their respective categories.**
with filmrentalcounts as (
select fc.film_id,fc.category_id,f.title,count(r.rental_id) as rental_count,
avg(count(r.rental_id)) over (partition by fc.category_id) as avg_rental_count
from film_category fc
join film f on fc.film_id=f.film_id
join inventory i on f.film_id=i.film_id
join rental r on i.inventory_id=r.inventory_id
group by fc.film_id,fc.category_id,f.title)
select film_id,category_id,rental_count,avg_rental_count
from filmrentalcounts where rental_count<avg_rental_count;
-- QUE-10 **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**
select month,monthly_revenue from (select date_format(rental_date,'%y-%m') as month,
sum(rental_rate) as monthly_revenue,row_number() over (order by sum(rental_rate) desc) as ranking from rental join
inventory on rental.inventory_id=inventory.inventory_id
join film on inventory.film_id=film.film_id
group by month )
rankedmonths where ranking<=5
order by ranking;